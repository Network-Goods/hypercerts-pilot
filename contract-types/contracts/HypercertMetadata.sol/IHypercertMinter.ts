/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IHyperCertMinter {
  export type ClaimStruct = {
    claimHash: PromiseOrValue<BytesLike>;
    workTimeframe: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    impactTimeframe: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    workScopes: PromiseOrValue<BytesLike>[];
    impactScopes: PromiseOrValue<BytesLike>[];
    rights: PromiseOrValue<BytesLike>[];
    contributors: PromiseOrValue<string>[];
    totalUnits: PromiseOrValue<BigNumberish>;
    version: PromiseOrValue<BigNumberish>;
    exists: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
  };

  export type ClaimStructOutput = [
    string,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    string[],
    string[],
    string[],
    string[],
    BigNumber,
    number,
    boolean,
    string,
    string,
    string
  ] & {
    claimHash: string;
    workTimeframe: [BigNumber, BigNumber];
    impactTimeframe: [BigNumber, BigNumber];
    workScopes: string[];
    impactScopes: string[];
    rights: string[];
    contributors: string[];
    totalUnits: BigNumber;
    version: number;
    exists: boolean;
    name: string;
    description: string;
    uri: string;
  };
}

export interface IHyperCertMinterInterface extends utils.Interface {
  functions: {
    "balanceOf(uint256)": FunctionFragment;
    "getImpactCert(uint256)": FunctionFragment;
    "impactScopes(bytes32)": FunctionFragment;
    "rights(bytes32)": FunctionFragment;
    "workScopes(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "getImpactCert"
      | "impactScopes"
      | "rights"
      | "workScopes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImpactCert",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "impactScopes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rights",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "workScopes",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImpactCert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impactScopes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workScopes", data: BytesLike): Result;

  events: {};
}

export interface IHyperCertMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHyperCertMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getImpactCert(
      claimID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IHyperCertMinter.ClaimStructOutput]>;

    impactScopes(
      impactScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rights(
      rightsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    workScopes(
      workScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  balanceOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getImpactCert(
    claimID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IHyperCertMinter.ClaimStructOutput>;

  impactScopes(
    impactScopeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  rights(
    rightsId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  workScopes(
    workScopeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImpactCert(
      claimID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IHyperCertMinter.ClaimStructOutput>;

    impactScopes(
      impactScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    rights(
      rightsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    workScopes(
      workScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImpactCert(
      claimID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impactScopes(
      impactScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rights(
      rightsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workScopes(
      workScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImpactCert(
      claimID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impactScopes(
      impactScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rights(
      rightsId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workScopes(
      workScopeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
